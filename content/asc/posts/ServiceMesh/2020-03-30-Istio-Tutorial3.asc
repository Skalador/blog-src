{:title "Openshift 4 and ServiceMesh 3 - Ingress Traffic" 
 :description "Openshift 4.x and Service Mesh/Istio Tutorial 3 - Get traffic into your Service Mesh and use Kiali to make your traffic visible."
 :layout 
 :post 
 :tags ["Istio", "Service Mesh", "OpenShift", "OCP"] 
 :toc false 
 :author "Thomas Jungbauer"
}

// Asciidoc Parameters
// toc is set here since I like unnumbered tocs more
:icons: font
:linkattrs:
:toc: macro

[.small]
_Last Modified: {docdatetime}_
// Asciidoc Parameters END

Part 3 of tutorial series *OpenShift 4 and Service Mesh* will show you how to create a Gateway and a VirtualService, so external traffic actually reaches your Mesh. It also provides an example script to run some curl in a loop. 
{nbsp} +
{nbsp} +

// Table of Content
toc::[options="nonumbers"]

== Configure Gateway and VirtualService Example
With the microservices deployed during link:/posts-output/ServiceMesh/2020-03-29-Istio-Tutorial2[Issue #2], it makes sense to test the access somehow. In order to bring traffic into the application a Gateway object and a VirtualService object must be created. 
{nbsp} +
{nbsp} +

The _Gateway_ will be the entry point which forward the traffic to the _istio ingressgateway_
[source,yaml]
----
apiVersion: networking.istio.io/v1alpha3                 
kind: Gateway                                            
metadata:                                                
  name: ingress-gateway-exampleapp                                
spec:                                                    
  selector:                                              
    istio: ingressgateway # use istio default controller
  servers:                                               
  - port:                                                
      number: 80                                         
      name: http                                         
      protocol: HTTP                                     
    hosts:                                               
    - "*"         
----
{nbsp} +

As 2nd object a VirtualService must be created:
[source,yaml]
----
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ingress-gateway-exampleapp
spec:
  hosts:
  - "*"
  gateways:
  - ingress-gateway-exampleapp
  http:
  - match:
    - uri:
        exact: /
    route:
    - destination:
        host: customer
        port:
          number: 8080
----
{nbsp} +

Get all istio-io related objects of your project. These objects represent the network objects of Service Mesh, like Gateway, VirtualService and DestinationRule (explained later)

[.hidecopy]
[source,bash]
----
oc get istio-io -n tutorial
NAME                                                 HOST             AGE
destinationrule.networking.istio.io/recommendation   recommendation   3d21h

NAME                                          AGE
gateway.networking.istio.io/ingress-gateway   4d15h

NAME                                                 GATEWAYS            HOSTS              AGE
virtualservice.networking.istio.io/ingress-gateway   [ingress-gateway]   [*]        4d15h
----

== Create some example traffic

Before we start, lets fetch the default route of our Service Mesh:
[source,bash]
----
export GATEWAY_URL=$(oc -n istio-system get route istio-ingressgateway -o jsonpath='{.spec.host}')
----

This should return: *istio-ingressgateway-istio-system.apps.<clustername>*
{nbsp} +


Now, let's create a shell script to run some curl commands in a loop and can be easily reused for other scenarios:

[source,bash]
----
#!/bin/bash

numberOfRequests=$1
host2check=$2

if [ $# -eq 0 ]; then
    echo "better define: <script> #ofrequests hostname2check"
    echo "Example: run.sh 100 hello.com"
	let "numberOfRequests=100"
else
	let "i = 0"
	while [ $i -lt $numberOfRequests ]; do
	  echo -n "# $i: "; curl $2
	  let "i=$((i + 1))"
	done
fi
----
{nbsp} +

Run the script and check the output:

[source,bash]
----
sh run-check.sh 1000 $GATEWAY_URL
----
{nbsp} +

This will send 1000 requests to our application:
[.hidecopy]
[source,bash]
----
# 0: customer => preference => recommendation v1 from 'f11b097f1dd0': 3622
# 1: customer => preference => recommendation v1 from 'f11b097f1dd0': 3623
# 2: customer => preference => recommendation v1 from 'f11b097f1dd0': 3624
# 3: customer => preference => recommendation v1 from 'f11b097f1dd0': 3625
# 4: customer => preference => recommendation v1 from 'f11b097f1dd0': 3626
# 5: customer => preference => recommendation v1 from 'f11b097f1dd0': 3627
...
----

== Verify in Kiali

To verify in Kiali our application, open the URL in your browser and login using your OpenShift credentials.

NOTE: If you do not know the URL for Kiali, execute the following command +
oc get route kiali -n istio-system

{nbsp} +

Switch the the *Graph* view and you should see the following picture:

.Kiali Graph
image::/img/Kiali-Example-1.png[Kiali, role=bordered]
{:title "Openshift 4 and ServiceMesh 1 - Installation" 
 :layout 
 :post 
 :tags ["Istio", "Service Mesh", "OpenShift", "OCP"] 
 :toc false 
}

// Asciidoc Parameters
// toc is set here since I like unnumbered tocs more
:author: Thomas Jungbauer
:icons: font
:linkattrs:
:toc: macros
toc::[options="nonumbers"]

[.small]
_Author: {author} - Last Modified: {docdatetime}_
// Asciidoc Parameters END

== OpenShift 4.x and ServiceMesh
The following tutorials for *OpenShift Service Mesh* are based on the official documentation: https://docs.openshift.com/container-platform/4.3/service_mesh/servicemesh-release-notes.html[OpenShift 4.3 Service Mesh^]. Currently OpenShift supports Istio 1.1.17, which shall be updated in one of the future releases. 

To learn the basics of Service Mesh, please consult the documentation as they are not repeated here. 

It is assumed that OpenShift has access to external registries, like quay.io.

== Prerequisites
At the very beginning OpenShift must be installed. This tutorial is based on OpenShift 4.3 and a Lab installation on Hetzner was used. 
Moreover, it is assumed that the https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.3/[OpenShift Client^] and Git are installed on the local system.  

During the tutorials an example application in the namespace _tutorial_ will be deployed. This application will contain 3 microservices:

* customer (the entry point)
* preference
* recommendation

This application is also used at the https://learn.openshift.com/servicemesh[Interactive Learning Portal^] which can be tested there interactively. However, the training is still based on OpenShift version 3.

== Install Red Hat Service Mesh
To deploy Service Mesh on Openshift 4 follow the guide at https://docs.openshift.com/container-platform/4.3/service_mesh/service_mesh_install/installing-ossm.html[Installing Red Hat OpenShift Service Mesh^].

In short, multiple operators must be installed: 

* Elasticsearch
* Jaeger
* Kiali
* Service Mesh 

CAUTION: Elasticsearch is a very memory intensive application. Per default it will request 16GB of memory which can be reduced on Lab environments.

== Link Jaeger and Grafana to Kiali
In the lab environment it happened that Kiali was not able to auto detect Grafana or Jaeger. 
This is visible when the link _Distributed Tracing_ is missing in the left menu. 

To fix this the ServiceMeshControlPlane object in the istio-system namespace must be updated with 3 lines:

[source,yaml]
----
oc edit ServiceMeshControlPlane -n istio-system

     kiali:  # ADD THE FOLLOWING LINES 
       dashboard:
         grafanaURL: https://grafana-istio-system.apps.<your clustername>
         jaegerURL: https://jaeger-istio-system.apps.<your clustername>
----

This change will take a few minutes to be effective. 
